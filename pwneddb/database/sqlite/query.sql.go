// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createPrefix = `-- name: CreatePrefix :one
INSERT INTO prefixes (prefix, updated, etag, hashes) VALUES (?, ?, ?, ?) RETURNING id, prefix, updated, etag, hashes
`

type CreatePrefixParams struct {
	Prefix  string
	Updated sql.NullInt64
	Etag    sql.NullString
	Hashes  string
}

func (q *Queries) CreatePrefix(ctx context.Context, arg CreatePrefixParams) (Prefix, error) {
	row := q.db.QueryRowContext(ctx, createPrefix,
		arg.Prefix,
		arg.Updated,
		arg.Etag,
		arg.Hashes,
	)
	var i Prefix
	err := row.Scan(
		&i.ID,
		&i.Prefix,
		&i.Updated,
		&i.Etag,
		&i.Hashes,
	)
	return i, err
}

const deletePrefix = `-- name: DeletePrefix :exec
DELETE FROM prefixes WHERE id = ?
`

func (q *Queries) DeletePrefix(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePrefix, id)
	return err
}

const getEtags = `-- name: GetEtags :many
SELECT id, prefix, etag FROM prefixes
`

type GetEtagsRow struct {
	ID     int64
	Prefix string
	Etag   sql.NullString
}

func (q *Queries) GetEtags(ctx context.Context) ([]GetEtagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEtags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEtagsRow
	for rows.Next() {
		var i GetEtagsRow
		if err := rows.Scan(&i.ID, &i.Prefix, &i.Etag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrefix = `-- name: GetPrefix :one
SELECT id, prefix, updated, etag, hashes FROM prefixes WHERE prefix = ? LIMIT 1
`

func (q *Queries) GetPrefix(ctx context.Context, prefix string) (Prefix, error) {
	row := q.db.QueryRowContext(ctx, getPrefix, prefix)
	var i Prefix
	err := row.Scan(
		&i.ID,
		&i.Prefix,
		&i.Updated,
		&i.Etag,
		&i.Hashes,
	)
	return i, err
}

const updatePrefix = `-- name: UpdatePrefix :exec
UPDATE prefixes set prefix = ?, updated = ?, etag = ?, hashes = ? WHERE id = ?
`

type UpdatePrefixParams struct {
	Prefix  string
	Updated sql.NullInt64
	Etag    sql.NullString
	Hashes  string
	ID      int64
}

func (q *Queries) UpdatePrefix(ctx context.Context, arg UpdatePrefixParams) error {
	_, err := q.db.ExecContext(ctx, updatePrefix,
		arg.Prefix,
		arg.Updated,
		arg.Etag,
		arg.Hashes,
		arg.ID,
	)
	return err
}
